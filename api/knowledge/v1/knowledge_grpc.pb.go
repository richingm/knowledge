// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: knowledge/v1/knowledge.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Knowledge_CreateKnowledge_FullMethodName = "/api.knowledge.v1.Knowledge/CreateKnowledge"
	Knowledge_UpdateKnowledge_FullMethodName = "/api.knowledge.v1.Knowledge/UpdateKnowledge"
	Knowledge_DeleteKnowledge_FullMethodName = "/api.knowledge.v1.Knowledge/DeleteKnowledge"
	Knowledge_GetKnowledge_FullMethodName    = "/api.knowledge.v1.Knowledge/GetKnowledge"
	Knowledge_ListKnowledge_FullMethodName   = "/api.knowledge.v1.Knowledge/ListKnowledge"
)

// KnowledgeClient is the client API for Knowledge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeClient interface {
	CreateKnowledge(ctx context.Context, in *CreateKnowledgeRequest, opts ...grpc.CallOption) (*CreateKnowledgeReply, error)
	UpdateKnowledge(ctx context.Context, in *UpdateKnowledgeRequest, opts ...grpc.CallOption) (*UpdateKnowledgeReply, error)
	DeleteKnowledge(ctx context.Context, in *DeleteKnowledgeRequest, opts ...grpc.CallOption) (*DeleteKnowledgeReply, error)
	GetKnowledge(ctx context.Context, in *GetKnowledgeRequest, opts ...grpc.CallOption) (*GetKnowledgeReply, error)
	ListKnowledge(ctx context.Context, in *ListKnowledgeRequest, opts ...grpc.CallOption) (*ListKnowledgeReply, error)
}

type knowledgeClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeClient(cc grpc.ClientConnInterface) KnowledgeClient {
	return &knowledgeClient{cc}
}

func (c *knowledgeClient) CreateKnowledge(ctx context.Context, in *CreateKnowledgeRequest, opts ...grpc.CallOption) (*CreateKnowledgeReply, error) {
	out := new(CreateKnowledgeReply)
	err := c.cc.Invoke(ctx, Knowledge_CreateKnowledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) UpdateKnowledge(ctx context.Context, in *UpdateKnowledgeRequest, opts ...grpc.CallOption) (*UpdateKnowledgeReply, error) {
	out := new(UpdateKnowledgeReply)
	err := c.cc.Invoke(ctx, Knowledge_UpdateKnowledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) DeleteKnowledge(ctx context.Context, in *DeleteKnowledgeRequest, opts ...grpc.CallOption) (*DeleteKnowledgeReply, error) {
	out := new(DeleteKnowledgeReply)
	err := c.cc.Invoke(ctx, Knowledge_DeleteKnowledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetKnowledge(ctx context.Context, in *GetKnowledgeRequest, opts ...grpc.CallOption) (*GetKnowledgeReply, error) {
	out := new(GetKnowledgeReply)
	err := c.cc.Invoke(ctx, Knowledge_GetKnowledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ListKnowledge(ctx context.Context, in *ListKnowledgeRequest, opts ...grpc.CallOption) (*ListKnowledgeReply, error) {
	out := new(ListKnowledgeReply)
	err := c.cc.Invoke(ctx, Knowledge_ListKnowledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeServer is the server API for Knowledge service.
// All implementations must embed UnimplementedKnowledgeServer
// for forward compatibility
type KnowledgeServer interface {
	CreateKnowledge(context.Context, *CreateKnowledgeRequest) (*CreateKnowledgeReply, error)
	UpdateKnowledge(context.Context, *UpdateKnowledgeRequest) (*UpdateKnowledgeReply, error)
	DeleteKnowledge(context.Context, *DeleteKnowledgeRequest) (*DeleteKnowledgeReply, error)
	GetKnowledge(context.Context, *GetKnowledgeRequest) (*GetKnowledgeReply, error)
	ListKnowledge(context.Context, *ListKnowledgeRequest) (*ListKnowledgeReply, error)
	mustEmbedUnimplementedKnowledgeServer()
}

// UnimplementedKnowledgeServer must be embedded to have forward compatible implementations.
type UnimplementedKnowledgeServer struct {
}

func (UnimplementedKnowledgeServer) CreateKnowledge(context.Context, *CreateKnowledgeRequest) (*CreateKnowledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) UpdateKnowledge(context.Context, *UpdateKnowledgeRequest) (*UpdateKnowledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) DeleteKnowledge(context.Context, *DeleteKnowledgeRequest) (*DeleteKnowledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) GetKnowledge(context.Context, *GetKnowledgeRequest) (*GetKnowledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) ListKnowledge(context.Context, *ListKnowledgeRequest) (*ListKnowledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) mustEmbedUnimplementedKnowledgeServer() {}

// UnsafeKnowledgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeServer will
// result in compilation errors.
type UnsafeKnowledgeServer interface {
	mustEmbedUnimplementedKnowledgeServer()
}

func RegisterKnowledgeServer(s grpc.ServiceRegistrar, srv KnowledgeServer) {
	s.RegisterService(&Knowledge_ServiceDesc, srv)
}

func _Knowledge_CreateKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).CreateKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_CreateKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).CreateKnowledge(ctx, req.(*CreateKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_UpdateKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).UpdateKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_UpdateKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).UpdateKnowledge(ctx, req.(*UpdateKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_DeleteKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).DeleteKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_DeleteKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).DeleteKnowledge(ctx, req.(*DeleteKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_GetKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetKnowledge(ctx, req.(*GetKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ListKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ListKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_ListKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ListKnowledge(ctx, req.(*ListKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Knowledge_ServiceDesc is the grpc.ServiceDesc for Knowledge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Knowledge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.knowledge.v1.Knowledge",
	HandlerType: (*KnowledgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKnowledge",
			Handler:    _Knowledge_CreateKnowledge_Handler,
		},
		{
			MethodName: "UpdateKnowledge",
			Handler:    _Knowledge_UpdateKnowledge_Handler,
		},
		{
			MethodName: "DeleteKnowledge",
			Handler:    _Knowledge_DeleteKnowledge_Handler,
		},
		{
			MethodName: "GetKnowledge",
			Handler:    _Knowledge_GetKnowledge_Handler,
		},
		{
			MethodName: "ListKnowledge",
			Handler:    _Knowledge_ListKnowledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "knowledge/v1/knowledge.proto",
}
