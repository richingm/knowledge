// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/richingm/knowledge/internal/app"
	"github.com/richingm/knowledge/internal/biz"
	"github.com/richingm/knowledge/internal/conf"
	repository "github.com/richingm/knowledge/internal/data/repository"
	"github.com/richingm/knowledge/internal/server"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := repository.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	knowledgeRepo := repository.NewKnowledgeRepo(dataData, logger)
	knowledgeUsecase := biz.NewKnowledgeUseCase(knowledgeRepo, logger)
	knowledgeService := app.NewKnowledgeApplication(knowledgeUsecase)
	grpcServer := server.NewGRPCServer(confServer, knowledgeService, logger)
	httpServer := server.NewHTTPServer(confServer, knowledgeService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
